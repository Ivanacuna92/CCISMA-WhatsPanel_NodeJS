const database = require('./database');
const logger = require('./logger');
const config = require('../config/config');

class FollowUpManager {
    constructor() {
        this.followUps = new Map(); // Cache local para seguimientos activos
        this.checkInterval = 2 * 60 * 60 * 1000; // 2 horas (revisi√≥n en producci√≥n)
        this.followUpInterval = 24 * 60 * 60 * 1000; // 24 horas entre seguimientos
        this.timerInterval = null; // Referencia al interval para poder limpiarlo
    }

    async initialize() {
        try {
            // Cargar seguimientos activos desde BD al iniciar
            const activeFollowUps = await database.query(
                'SELECT * FROM follow_ups WHERE status = "active"'
            );

            for (const followUp of activeFollowUps) {
                this.followUps.set(followUp.user_id, {
                    userId: followUp.user_id,
                    chatId: followUp.chat_id,
                    lastFollowUp: new Date(followUp.last_follow_up).getTime(),
                    followUpCount: followUp.follow_up_count,
                    status: followUp.status,
                    startedAt: new Date(followUp.started_at).getTime()
                });
            }

            console.log(`‚úì FollowUpManager inicializado con ${activeFollowUps.length} seguimientos activos`);
        } catch (error) {
            console.error('Error inicializando FollowUpManager:', error);
        }
    }

    async startFollowUp(userId, chatId) {
        try {
            console.log(`[FollowUp] üîç Intentando iniciar seguimiento para ${userId}`);

            // Verificar si ya existe un seguimiento activo
            const existing = await database.findOne('follow_ups', 'user_id = ? AND status = "active"', [userId]);

            if (existing) {
                console.log(`[FollowUp] ‚ö†Ô∏è Seguimiento ya activo para usuario ${userId}`);
                return;
            }

            // Crear nuevo seguimiento
            const now = new Date();
            console.log(`[FollowUp] üìù Insertando en BD para ${userId}...`);

            await database.insert('follow_ups', {
                user_id: userId,
                chat_id: chatId,
                last_follow_up: now,
                follow_up_count: 0,
                status: 'active',
                started_at: now
            });

            // Agregar a cache local
            this.followUps.set(userId, {
                userId,
                chatId,
                lastFollowUp: now.getTime(),
                followUpCount: 0,
                status: 'active',
                startedAt: now.getTime()
            });

            await logger.log('SYSTEM', 'Seguimiento autom√°tico iniciado', userId);
            console.log(`[FollowUp] ‚úÖ Seguimiento iniciado exitosamente para ${userId}`);
            console.log(`[FollowUp] üìä Total seguimientos activos: ${this.followUps.size}`);
        } catch (error) {
            console.error(`[FollowUp] ‚ùå Error iniciando seguimiento para ${userId}:`, error);
        }
    }

    async stopFollowUp(userId, reason = 'manual') {
        try {
            // Actualizar en BD
            await database.update('follow_ups',
                {
                    status: 'stopped',
                    stopped_reason: reason,
                    stopped_at: new Date()
                },
                'user_id = ? AND status = "active"',
                [userId]
            );

            // Remover de cache local
            this.followUps.delete(userId);

            await logger.log('SYSTEM', `Seguimiento detenido: ${reason}`, userId);
            console.log(`‚úì Seguimiento detenido para usuario ${userId}: ${reason}`);
        } catch (error) {
            console.error('Error deteniendo seguimiento:', error);
        }
    }

    async isFollowUpActive(userId) {
        return this.followUps.has(userId);
    }

    async getFollowUpStatus(userId) {
        return this.followUps.get(userId) || null;
    }

    async checkPendingFollowUps(sock, aiService, sessionManager) {
        const now = Date.now();
        console.log(`[FollowUp] üîÑ Revisando seguimientos pendientes... Total activos: ${this.followUps.size}`);

        for (const [userId, followUp] of this.followUps.entries()) {
            try {
                // Verificar si han pasado 24 horas desde el √∫ltimo seguimiento
                const timeSinceLastFollowUp = now - followUp.lastFollowUp;
                const hoursSinceLastFollowUp = Math.floor(timeSinceLastFollowUp / (60 * 60 * 1000));

                console.log(`[FollowUp] Usuario ${userId}:`);
                console.log(`  - Tiempo desde √∫ltimo seguimiento: ${hoursSinceLastFollowUp} horas`);
                console.log(`  - Contador de seguimientos: ${followUp.followUpCount}`);
                console.log(`  - Intervalo requerido: 24 horas`);

                if (timeSinceLastFollowUp >= this.followUpInterval) {
                    console.log(`  - ‚úÖ Tiempo cumplido, generando mensaje...`);

                    // Generar mensaje de seguimiento usando IA
                    const followUpMessage = await this.generateFollowUpMessage(
                        userId,
                        followUp.followUpCount,
                        aiService,
                        sessionManager
                    );

                    console.log(`  - üìù Mensaje generado: "${followUpMessage.substring(0, 50)}..."`);

                    // Enviar mensaje
                    if (followUp.chatId && sock) {
                        console.log(`  - üì§ Enviando mensaje a ${followUp.chatId}...`);
                        await sock.sendMessage(followUp.chatId, { text: followUpMessage });
                        await logger.log('BOT', followUpMessage, userId);

                        // Actualizar contador y timestamp
                        followUp.followUpCount++;
                        followUp.lastFollowUp = now;

                        // Actualizar en BD
                        await database.update('follow_ups',
                            {
                                last_follow_up: new Date(),
                                follow_up_count: followUp.followUpCount
                            },
                            'user_id = ?',
                            [userId]
                        );

                        // Actualizar cache
                        this.followUps.set(userId, followUp);

                        console.log(`  - ‚úÖ Mensaje de seguimiento #${followUp.followUpCount} enviado exitosamente`);
                    } else {
                        console.log(`  - ‚ùå No se pudo enviar: chatId=${followUp.chatId}, sock=${!!sock}`);
                    }
                } else {
                    const hoursRemaining = Math.ceil((this.followUpInterval - timeSinceLastFollowUp) / (60 * 60 * 1000));
                    console.log(`  - ‚è≥ Faltan ${hoursRemaining} horas para el siguiente seguimiento`);
                }
            } catch (error) {
                console.error(`[FollowUp] ‚ùå Error procesando seguimiento para ${userId}:`, error);
            }
        }

        if (this.followUps.size === 0) {
            console.log(`[FollowUp] üì≠ No hay seguimientos activos`);
        }
    }

    async generateFollowUpMessage(userId, followUpCount, aiService, sessionManager) {
        try {
            // Obtener historial de conversaci√≥n
            const messages = await sessionManager.getMessages(userId);

            // Crear prompt para generar mensaje de seguimiento
            const systemPrompt = {
                role: 'system',
                content: `Eres Daniel de Navetec. El cliente dej√≥ de responder hace 24 horas.

Esta es la conversaci√≥n #${followUpCount + 1} de seguimiento.

IMPORTANTE:
- NO uses emojis
- S√© breve y profesional
- Retoma el contexto de la conversaci√≥n anterior
- Si es el primer seguimiento (count 0): pregunta si a√∫n est√° interesado y si tiene dudas
- Si es el segundo seguimiento (count 1): ofrece alternativas o menciona beneficios adicionales
- Si es el tercer seguimiento (count 2): menciona que es el √∫ltimo contacto y ofrece dejar informaci√≥n de contacto directo
- M√°ximo 2-3 l√≠neas

Genera SOLO el mensaje de seguimiento, sin explicaciones adicionales.`
            };

            const userPrompt = {
                role: 'user',
                content: 'Genera un mensaje de seguimiento apropiado basado en la conversaci√≥n anterior.'
            };

            const aiMessages = [systemPrompt, ...messages, userPrompt];
            const response = await aiService.generateResponse(aiMessages);

            return response;
        } catch (error) {
            console.error('Error generando mensaje de seguimiento:', error);

            // Fallback a mensajes predefinidos
            const fallbackMessages = [
                'Hola, quer√≠a darle seguimiento a nuestra conversaci√≥n anterior. ¬øA√∫n est√° interesado en conocer m√°s sobre nuestras naves industriales? ¬øTiene alguna duda que pueda resolver?',
                'Hola nuevamente. Veo que no hemos continuado con la conversaci√≥n. ¬øLe gustar√≠a conocer otras opciones disponibles o recibir informaci√≥n adicional sobre alg√∫n parque industrial espec√≠fico?',
                'Hola, este ser√° mi √∫ltimo mensaje de seguimiento. Si desea informaci√≥n adicional, estamos a su disposici√≥n.'
            ];

            return fallbackMessages[Math.min(followUpCount, 2)];
        }
    }

    async analyzeConversationStatus(userId, lastMessage, aiService, sessionManager) {
        try {
            // Obtener historial completo
            const messages = await sessionManager.getMessages(userId);

            // Crear prompt para analizar el estado
            const analysisPrompt = {
                role: 'system',
                content: `Analiza esta conversaci√≥n y determina si se cumple alguna de estas condiciones:

1. ACEPTADO: El cliente mostr√≥ intenci√≥n clara de proceder (pidi√≥ cita, proporcion√≥ correo, dijo que s√≠ est√° interesado)
2. RECHAZADO: El cliente rechaz√≥ expl√≠citamente la oferta (dijo "no me interesa", "no gracias", "no es para m√≠")
3. FRUSTRADO: El cliente muestra frustraci√≥n o enojo (usa lenguaje negativo, se queja, menciona insistencia molesta)
4. ACTIVO: La conversaci√≥n sigue activa y productiva
5. INACTIVO: El cliente dej√≥ de responder sin se√±ales claras

Responde √öNICAMENTE con una de estas palabras: ACEPTADO, RECHAZADO, FRUSTRADO, ACTIVO, o INACTIVO`
            };

            const userPrompt = {
                role: 'user',
                content: `√öltimo mensaje del cliente: "${lastMessage}"\n\nAnaliza el estado de la conversaci√≥n.`
            };

            const aiMessages = [analysisPrompt, ...messages, userPrompt];
            const response = await aiService.generateResponse(aiMessages);

            const status = response.trim().toUpperCase();

            // Manejar el resultado
            if (['ACEPTADO', 'RECHAZADO', 'FRUSTRADO'].includes(status)) {
                await this.stopFollowUp(userId, status.toLowerCase());
                return status;
            }

            return status;
        } catch (error) {
            console.error('Error analizando estado de conversaci√≥n:', error);
            return 'ACTIVO'; // Default a activo en caso de error
        }
    }

    startFollowUpTimer(sock, aiService, sessionManager) {
        // Limpiar interval existente si hay uno
        if (this.timerInterval) {
            console.log('[FollowUp] ‚ö†Ô∏è Limpiando timer existente antes de crear uno nuevo');
            clearInterval(this.timerInterval);
            this.timerInterval = null;
        }

        console.log('‚úì Timer de seguimiento iniciado (revisi√≥n cada 2 horas)');
        console.log(`‚úì Intervalo de seguimiento: 24 horas`);

        this.timerInterval = setInterval(() => {
            this.checkPendingFollowUps(sock, aiService, sessionManager);
        }, this.checkInterval);
    }

    async getAllActiveFollowUps() {
        return Array.from(this.followUps.values());
    }
}

module.exports = new FollowUpManager();
